// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2023 00:50:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module computer_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module computer_vlg_check_tst (
	M_addr,
	M_data_out,
	M_q,
	PC,
	R0,
	R1,
	R2,
	R3,
	Write_read,
	overflow,
	state,
	sampler_rx
);
input [11:0] M_addr;
input [7:0] M_data_out;
input [7:0] M_q;
input [7:0] PC;
input [7:0] R0;
input [7:0] R1;
input [7:0] R2;
input [7:0] R3;
input  Write_read;
input  overflow;
input [2:0] state;
input sampler_rx;

reg [11:0] M_addr_expected;
reg [7:0] M_data_out_expected;
reg [7:0] M_q_expected;
reg [7:0] PC_expected;
reg [7:0] R0_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] R3_expected;
reg  Write_read_expected;
reg  overflow_expected;
reg [2:0] state_expected;

reg [11:0] M_addr_prev;
reg [7:0] M_data_out_prev;
reg [7:0] M_q_prev;
reg [7:0] PC_prev;
reg [7:0] R0_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] R3_prev;
reg  Write_read_prev;
reg  overflow_prev;
reg [2:0] state_prev;

reg [11:0] M_addr_expected_prev;
reg [7:0] M_data_out_expected_prev;
reg [7:0] M_q_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] R0_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] R3_expected_prev;
reg  Write_read_expected_prev;
reg  overflow_expected_prev;
reg [2:0] state_expected_prev;

reg [11:0] last_M_addr_exp;
reg [7:0] last_M_data_out_exp;
reg [7:0] last_M_q_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_R0_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_R3_exp;
reg  last_Write_read_exp;
reg  last_overflow_exp;
reg [2:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	M_addr_prev = M_addr;
	M_data_out_prev = M_data_out;
	M_q_prev = M_q;
	PC_prev = PC;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	Write_read_prev = Write_read;
	overflow_prev = overflow;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	M_addr_expected_prev = M_addr_expected;
	M_data_out_expected_prev = M_data_out_expected;
	M_q_expected_prev = M_q_expected;
	PC_expected_prev = PC_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	Write_read_expected_prev = Write_read_expected;
	overflow_expected_prev = overflow_expected;
	state_expected_prev = state_expected;
end


// expected M_addr[ 11 ]
initial
begin
	M_addr_expected[11] = 1'bX;
end 
// expected M_addr[ 10 ]
initial
begin
	M_addr_expected[10] = 1'bX;
end 
// expected M_addr[ 9 ]
initial
begin
	M_addr_expected[9] = 1'bX;
end 
// expected M_addr[ 8 ]
initial
begin
	M_addr_expected[8] = 1'bX;
end 
// expected M_addr[ 7 ]
initial
begin
	M_addr_expected[7] = 1'bX;
end 
// expected M_addr[ 6 ]
initial
begin
	M_addr_expected[6] = 1'bX;
end 
// expected M_addr[ 5 ]
initial
begin
	M_addr_expected[5] = 1'bX;
end 
// expected M_addr[ 4 ]
initial
begin
	M_addr_expected[4] = 1'bX;
end 
// expected M_addr[ 3 ]
initial
begin
	M_addr_expected[3] = 1'bX;
end 
// expected M_addr[ 2 ]
initial
begin
	M_addr_expected[2] = 1'bX;
end 
// expected M_addr[ 1 ]
initial
begin
	M_addr_expected[1] = 1'bX;
end 
// expected M_addr[ 0 ]
initial
begin
	M_addr_expected[0] = 1'bX;
end 
// expected M_data_out[ 7 ]
initial
begin
	M_data_out_expected[7] = 1'bX;
end 
// expected M_data_out[ 6 ]
initial
begin
	M_data_out_expected[6] = 1'bX;
end 
// expected M_data_out[ 5 ]
initial
begin
	M_data_out_expected[5] = 1'bX;
end 
// expected M_data_out[ 4 ]
initial
begin
	M_data_out_expected[4] = 1'bX;
end 
// expected M_data_out[ 3 ]
initial
begin
	M_data_out_expected[3] = 1'bX;
end 
// expected M_data_out[ 2 ]
initial
begin
	M_data_out_expected[2] = 1'bX;
end 
// expected M_data_out[ 1 ]
initial
begin
	M_data_out_expected[1] = 1'bX;
end 
// expected M_data_out[ 0 ]
initial
begin
	M_data_out_expected[0] = 1'bX;
end 
// expected M_q[ 7 ]
initial
begin
	M_q_expected[7] = 1'bX;
end 
// expected M_q[ 6 ]
initial
begin
	M_q_expected[6] = 1'bX;
end 
// expected M_q[ 5 ]
initial
begin
	M_q_expected[5] = 1'bX;
end 
// expected M_q[ 4 ]
initial
begin
	M_q_expected[4] = 1'bX;
end 
// expected M_q[ 3 ]
initial
begin
	M_q_expected[3] = 1'bX;
end 
// expected M_q[ 2 ]
initial
begin
	M_q_expected[2] = 1'bX;
end 
// expected M_q[ 1 ]
initial
begin
	M_q_expected[1] = 1'bX;
end 
// expected M_q[ 0 ]
initial
begin
	M_q_expected[0] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 

// expected Write_read
initial
begin
	Write_read_expected = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(M_addr_expected or M_addr or M_data_out_expected or M_data_out or M_q_expected or M_q or PC_expected or PC or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or Write_read_expected or Write_read or overflow_expected or overflow or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected M_addr = %b | expected M_data_out = %b | expected M_q = %b | expected PC = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected Write_read = %b | expected overflow = %b | expected state = %b | ",M_addr_expected_prev,M_data_out_expected_prev,M_q_expected_prev,PC_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,Write_read_expected_prev,overflow_expected_prev,state_expected_prev);
	$display("| real M_addr = %b | real M_data_out = %b | real M_q = %b | real PC = %b | real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | real Write_read = %b | real overflow = %b | real state = %b | ",M_addr_prev,M_data_out_prev,M_q_prev,PC_prev,R0_prev,R1_prev,R2_prev,R3_prev,Write_read_prev,overflow_prev,state_prev);
`endif
	if (
		( M_addr_expected_prev[0] !== 1'bx ) && ( M_addr_prev[0] !== M_addr_expected_prev[0] )
		&& ((M_addr_expected_prev[0] !== last_M_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[0] = M_addr_expected_prev[0];
	end
	if (
		( M_addr_expected_prev[1] !== 1'bx ) && ( M_addr_prev[1] !== M_addr_expected_prev[1] )
		&& ((M_addr_expected_prev[1] !== last_M_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[1] = M_addr_expected_prev[1];
	end
	if (
		( M_addr_expected_prev[2] !== 1'bx ) && ( M_addr_prev[2] !== M_addr_expected_prev[2] )
		&& ((M_addr_expected_prev[2] !== last_M_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[2] = M_addr_expected_prev[2];
	end
	if (
		( M_addr_expected_prev[3] !== 1'bx ) && ( M_addr_prev[3] !== M_addr_expected_prev[3] )
		&& ((M_addr_expected_prev[3] !== last_M_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[3] = M_addr_expected_prev[3];
	end
	if (
		( M_addr_expected_prev[4] !== 1'bx ) && ( M_addr_prev[4] !== M_addr_expected_prev[4] )
		&& ((M_addr_expected_prev[4] !== last_M_addr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[4] = M_addr_expected_prev[4];
	end
	if (
		( M_addr_expected_prev[5] !== 1'bx ) && ( M_addr_prev[5] !== M_addr_expected_prev[5] )
		&& ((M_addr_expected_prev[5] !== last_M_addr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[5] = M_addr_expected_prev[5];
	end
	if (
		( M_addr_expected_prev[6] !== 1'bx ) && ( M_addr_prev[6] !== M_addr_expected_prev[6] )
		&& ((M_addr_expected_prev[6] !== last_M_addr_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[6] = M_addr_expected_prev[6];
	end
	if (
		( M_addr_expected_prev[7] !== 1'bx ) && ( M_addr_prev[7] !== M_addr_expected_prev[7] )
		&& ((M_addr_expected_prev[7] !== last_M_addr_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[7] = M_addr_expected_prev[7];
	end
	if (
		( M_addr_expected_prev[8] !== 1'bx ) && ( M_addr_prev[8] !== M_addr_expected_prev[8] )
		&& ((M_addr_expected_prev[8] !== last_M_addr_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[8] = M_addr_expected_prev[8];
	end
	if (
		( M_addr_expected_prev[9] !== 1'bx ) && ( M_addr_prev[9] !== M_addr_expected_prev[9] )
		&& ((M_addr_expected_prev[9] !== last_M_addr_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[9] = M_addr_expected_prev[9];
	end
	if (
		( M_addr_expected_prev[10] !== 1'bx ) && ( M_addr_prev[10] !== M_addr_expected_prev[10] )
		&& ((M_addr_expected_prev[10] !== last_M_addr_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[10] = M_addr_expected_prev[10];
	end
	if (
		( M_addr_expected_prev[11] !== 1'bx ) && ( M_addr_prev[11] !== M_addr_expected_prev[11] )
		&& ((M_addr_expected_prev[11] !== last_M_addr_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_addr_expected_prev);
		$display ("     Real value = %b", M_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M_addr_exp[11] = M_addr_expected_prev[11];
	end
	if (
		( M_data_out_expected_prev[0] !== 1'bx ) && ( M_data_out_prev[0] !== M_data_out_expected_prev[0] )
		&& ((M_data_out_expected_prev[0] !== last_M_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[0] = M_data_out_expected_prev[0];
	end
	if (
		( M_data_out_expected_prev[1] !== 1'bx ) && ( M_data_out_prev[1] !== M_data_out_expected_prev[1] )
		&& ((M_data_out_expected_prev[1] !== last_M_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[1] = M_data_out_expected_prev[1];
	end
	if (
		( M_data_out_expected_prev[2] !== 1'bx ) && ( M_data_out_prev[2] !== M_data_out_expected_prev[2] )
		&& ((M_data_out_expected_prev[2] !== last_M_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[2] = M_data_out_expected_prev[2];
	end
	if (
		( M_data_out_expected_prev[3] !== 1'bx ) && ( M_data_out_prev[3] !== M_data_out_expected_prev[3] )
		&& ((M_data_out_expected_prev[3] !== last_M_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[3] = M_data_out_expected_prev[3];
	end
	if (
		( M_data_out_expected_prev[4] !== 1'bx ) && ( M_data_out_prev[4] !== M_data_out_expected_prev[4] )
		&& ((M_data_out_expected_prev[4] !== last_M_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[4] = M_data_out_expected_prev[4];
	end
	if (
		( M_data_out_expected_prev[5] !== 1'bx ) && ( M_data_out_prev[5] !== M_data_out_expected_prev[5] )
		&& ((M_data_out_expected_prev[5] !== last_M_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[5] = M_data_out_expected_prev[5];
	end
	if (
		( M_data_out_expected_prev[6] !== 1'bx ) && ( M_data_out_prev[6] !== M_data_out_expected_prev[6] )
		&& ((M_data_out_expected_prev[6] !== last_M_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[6] = M_data_out_expected_prev[6];
	end
	if (
		( M_data_out_expected_prev[7] !== 1'bx ) && ( M_data_out_prev[7] !== M_data_out_expected_prev[7] )
		&& ((M_data_out_expected_prev[7] !== last_M_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_data_out_expected_prev);
		$display ("     Real value = %b", M_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_data_out_exp[7] = M_data_out_expected_prev[7];
	end
	if (
		( M_q_expected_prev[0] !== 1'bx ) && ( M_q_prev[0] !== M_q_expected_prev[0] )
		&& ((M_q_expected_prev[0] !== last_M_q_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[0] = M_q_expected_prev[0];
	end
	if (
		( M_q_expected_prev[1] !== 1'bx ) && ( M_q_prev[1] !== M_q_expected_prev[1] )
		&& ((M_q_expected_prev[1] !== last_M_q_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[1] = M_q_expected_prev[1];
	end
	if (
		( M_q_expected_prev[2] !== 1'bx ) && ( M_q_prev[2] !== M_q_expected_prev[2] )
		&& ((M_q_expected_prev[2] !== last_M_q_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[2] = M_q_expected_prev[2];
	end
	if (
		( M_q_expected_prev[3] !== 1'bx ) && ( M_q_prev[3] !== M_q_expected_prev[3] )
		&& ((M_q_expected_prev[3] !== last_M_q_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[3] = M_q_expected_prev[3];
	end
	if (
		( M_q_expected_prev[4] !== 1'bx ) && ( M_q_prev[4] !== M_q_expected_prev[4] )
		&& ((M_q_expected_prev[4] !== last_M_q_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[4] = M_q_expected_prev[4];
	end
	if (
		( M_q_expected_prev[5] !== 1'bx ) && ( M_q_prev[5] !== M_q_expected_prev[5] )
		&& ((M_q_expected_prev[5] !== last_M_q_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[5] = M_q_expected_prev[5];
	end
	if (
		( M_q_expected_prev[6] !== 1'bx ) && ( M_q_prev[6] !== M_q_expected_prev[6] )
		&& ((M_q_expected_prev[6] !== last_M_q_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[6] = M_q_expected_prev[6];
	end
	if (
		( M_q_expected_prev[7] !== 1'bx ) && ( M_q_prev[7] !== M_q_expected_prev[7] )
		&& ((M_q_expected_prev[7] !== last_M_q_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_q_expected_prev);
		$display ("     Real value = %b", M_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_q_exp[7] = M_q_expected_prev[7];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end
	if (
		( Write_read_expected_prev !== 1'bx ) && ( Write_read_prev !== Write_read_expected_prev )
		&& ((Write_read_expected_prev !== last_Write_read_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_read_expected_prev);
		$display ("     Real value = %b", Write_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Write_read_exp = Write_read_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [11:0] M_addr;
wire [7:0] M_data_out;
wire [7:0] M_q;
wire [7:0] PC;
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] R3;
wire Write_read;
wire overflow;
wire [2:0] state;

wire sampler;                             

// assign statements (if any)                          
computer i1 (
// port map - connection between master ports and signals/registers   
	.M_addr(M_addr),
	.M_data_out(M_data_out),
	.M_q(M_q),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.Write_read(Write_read),
	.clk(clk),
	.overflow(overflow),
	.reset(reset),
	.state(state)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

computer_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

computer_vlg_check_tst tb_out(
	.M_addr(M_addr),
	.M_data_out(M_data_out),
	.M_q(M_q),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.Write_read(Write_read),
	.overflow(overflow),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

